// CSV Productos
const csvUrl =
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vRr62BlKCzICpC0ctnU2mRB8cq_SOCcsgydXQJXD5pQvasO1b1iT0Wp_L7sFxH8UGJCepaMjng1GUO0/pub?gid=1610793698&single=true&output=csv";

// CSV Cotizacion
const cotizacionUrl =
    "https://docs.google.com/spreadsheets/d/e/2PACX-1vQJ7PS8pvnCKdpLgJFonsZNN54Rs8oTpzGgCxhbfZzd3KmKb9k12OEwgAWuDAHiIPraWKxoS5TlCm4X/pub?gid=0&single=true&output=csv";

// Dolar
fetch(cotizacionUrl)
    .then((res) => res.text())
    .then((csv) => {
        const lineas = csv.trim().split("\n");
        if (lineas.length > 0) {
            const valorDolar = lineas[0].split(",")[0].replace(",", ".");
            document.getElementById("dolarValor").textContent = valorDolar || "N/A";
        } else {
            document.getElementById("dolarValor").textContent = "Sin datos";
        }
    })
    .catch((err) => {
        document.getElementById("dolarValor").textContent = "Error";
        console.error("Error al obtener d√≥lar:", err);
    });

// Fecha
const fechaFormateada = new Intl.DateTimeFormat("es-AR").format(new Date());
document.getElementById("fechaActual").textContent = fechaFormateada;

// Logo F5 cach√©
window.onload = function () {
    var logoDesktop = document.getElementById("logo-desktop");
    logoDesktop.src = "images/logo-miphone-1.svg?refresh=" + new Date().getTime();
};

// Obtener y procesar los productos desde el CSV
Papa.parse(csvUrl, {
    download: true,
    complete: function (results) {
        const datos = results.data;
        const categorias = procesarCategoriasDesdeCSV(datos);
        renderCategorias(categorias);
    }
});

function procesarCategoriasDesdeCSV(data) {
    const categorias = [];

    let categoriaActual = null;
    let headers = [];
    let productos = [];
    let esperandoHeaders = false;

    for (let i = 0; i < data.length; i++) {
        const fila = data[i].map((cell) => (cell || "").trim());
        const celdasNoVacias = fila.filter((c) => c !== "");

        // Detectar categor√≠a: solo 1 celda no vac√≠a en may√∫sculas
        if (celdasNoVacias.length === 1 && celdasNoVacias[0] === celdasNoVacias[0].toUpperCase()) {
            // Guardar la anterior
            if (categoriaActual && headers.length > 0) {
                categorias.push({
                    nombre: categoriaActual,
                    headers,
                    productos
                });
            }

            categoriaActual = celdasNoVacias[0];
            headers = [];
            productos = [];
            esperandoHeaders = true;
            continue;
        }

        // Siguiente fila despu√©s del nombre de categor√≠a = headers
        if (esperandoHeaders) {
            headers = fila;
            esperandoHeaders = false;
            continue;
        }

        // // Agregar filas de producto (inclusive vac√≠as)
        if (headers.length > 0) {
            productos.push(fila);
        }
    }

    // Guardar la √∫ltima categor√≠a
    if (categoriaActual && headers.length > 0) {
        categorias.push({
            nombre: categoriaActual,
            headers,
            productos
        });
    }

    return categorias;
}

// Renderizar categor√≠as y productos
function renderCategorias(categorias) {
    const container = document.getElementById("categoriasContainer");
    container.innerHTML = ""; // Limpiar el contenedor antes de agregar los productos

    categorias.forEach((cat, index) => {
        const catId = `cat-${index}`;
        const ocultarColumnaIndex = cat.headers.indexOf("Ocultar");

        // Asignar el √≠cono usando el objeto iconosCategorias
        const icono = iconosCategorias[cat.nombre] || "bi bi-phone"; // √çcono por defecto

        let previousFirstValue = null;
        const firstVisibleIndex = cat.headers.findIndex((_, i) => i !== ocultarColumnaIndex);

        const card = document.createElement("div");
        card.className = "accordion mb-1";
        card.innerHTML = `
      <div class="accordion-flush">
        <h2 class="accordion-header" id="heading-${catId}">
          <button class="accordion-button collapsed d-block text-center" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${catId}" aria-expanded="false" aria-controls="collapse-${catId}">
            <i class="${icono} me-2"></i> ${cat.nombre}
          </button>
        </h2>
        <div id="collapse-${catId}" class="accordion-collapse collapse" aria-labelledby="heading-${catId}">
          <div class="accordion-body">
            ${renderAlerta(cat.nombre)}
            <div class="table-responsive">
              <table class="table table-sm text-center align-middle" id="tabla-${catId}">
                <thead>
                  <tr>
                    ${cat.headers
                        .filter((h) => h !== "Ocultar")
                        .map((h) => `<th>${h}</th>`)
                        .join("")}
                  </tr>
                </thead>
                <tbody>
                  ${cat.productos
                      .filter((row) => ocultarColumnaIndex === -1 || row[ocultarColumnaIndex].toLowerCase() !== "x")
                      .map((row) => {
                          const esFilaVacia = row.every((cell) => cell === "");
                          if (esFilaVacia) {
                              return `<tr><td colspan="${cat.headers.length - (ocultarColumnaIndex !== -1 ? 1 : 0)}">&nbsp;</td></tr>`;
                          }

                          return `
<tr>
  ${row
      .map((cell, index) => {
          if (index === ocultarColumnaIndex) return null;

          // Badge
          if (cat.headers[index] === "L" && cell) {
              const badge = badges[cell];
              return `<td>${badge || cell}</td>`;
          }

          // Primera columna visible con fusi√≥n visual
          if (index === firstVisibleIndex) {
              const mostrar = cell && cell !== previousFirstValue;
              previousFirstValue = cell || previousFirstValue;
              return mostrar
                  ? `<td><strong>${cell}</strong></td>`
                  : `<td><span class="visually-hidden">${cell}</span></td>`;
          }

          // Si es la columna "Detalles" y hay un link, mostrar bot√≥n con √≠cono
          if (cat.headers[index] === "Fotos" && cell) {
              return `<td><a href="${cell}" target="_blank" class="btn btn-secondary btn-sm" title="Ver fotos"><i class="bi bi-image"></i></a></td>`;
          }

          return `<td>${cell || "&nbsp;"}</td>`;
      })
      .filter((cell) => cell !== null)
      .join("")}
</tr>
`;
                      })
                      .join("")}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    `;
        container.appendChild(card);
    });
}

// Alertas
function renderAlerta(nombreCategoria) {
    const mensajes = {
        "MACBOOK AIR":
            "Consultanos por versiones custom (Chip MAX, +RAM, etc). Tambi√©n traemos iMac, Mac mini, Mac Studio",
        "MACBOOK PRO":
            "Consultanos por versiones custom (Chip MAX, +RAM, etc). Tambi√©n traemos iMac, Mac mini, Mac Studio",
        IPHONE: "¬°Combo cargador original (Apple 20W, MWVV3AM) + U$30!",
        SAMSUNG: "Por otros productos de la marca (Linea Z, Samsung Tab, etc) consultanos por WhatsApp",
        ACCESORIOS: "Consultar disponibilidad en modelos y colores"
    };

    if (!mensajes[nombreCategoria]) return "";

    return `
    <div class="alert alert-info d-flex justify-content-center align-items-center text-center mb-3 py-2 px-3" role="alert">
      <i class="bi bi-info-circle-fill me-2"></i>
      <div class="small">${mensajes[nombreCategoria]}</div>
    </div>
  `;
}

// Definir los √≠conos para las categor√≠as
const iconosCategorias = {
    IPHONE: "bi-apple",
    AIRPODS: "bi-earbuds",
    "APPLE WATCH": "bi-smartwatch",
    AIRTAG: "bi-tag",
    IPAD: "bi-tablet-fill",
    "MACBOOK AIR": "bi-laptop",
    "MACBOOK PRO": "bi-laptop",
    PLAYSTATION: "bi-playstation",
    XBOX: "bi-xbox",
    "NINTENDO SWITCH": "bi-nintendo-switch",
    VR: "bi-headset-vr",
    GOPRO: "bi-camera-video",
    INSTA360: "bi-camera-video",
    SMARTWATCH: "bi-watch",
    ACCESORIOS: "bi-bag-plus",
    "DRONE DJI": "bi-robot"
};

// Badges
const badges = {
    NEW: `<span class="badge bg-warning text-dark">‚úàÔ∏è¬°NUEVO!</span>`,
    SALE: `<span class="badge bg-danger">üî•¬°OFERTA!</span>`,
    HOT: `<span class="badge bg-primary">üî• HOT</span>`,
    LIMITED: `<span class="badge bg-info text-dark">‚è≥ LIMITADO</span>`
};

// Filtro general con debounce
const filtrarGeneral = () => {
    const term = document.getElementById("searchGeneral").value.toLowerCase().trim();
    const words = term ? term.split(/\s+/) : [];
    const resultEl = document.getElementById("resultadoBusqueda");
    let matchCount = 0;

    document.querySelectorAll(".accordion-flush").forEach((item) => {
        const btn = item.querySelector(".accordion-button");
        const collapseEl = item.querySelector(".collapse");
        const bs = bootstrap.Collapse.getOrCreateInstance(collapseEl, { toggle: false });

        if (!term) {
            item.style.display = "";
            bs.hide();
            btn.classList.add("collapsed");
            btn.setAttribute("aria-expanded", "false");
            item.querySelectorAll("tbody tr").forEach((row) => {
                row.style.display = "";
            });

            return;
        }

        const headerText = btn.innerText.toLowerCase();
        const rows = Array.from(item.querySelectorAll("tbody tr"));
        let itemHasMatch = false;

        rows.forEach((row) => {
            const raw =
                Array.from(row.cells)
                    .filter((_, i) => i !== 2)
                    .map((td) => td.innerText)
                    .join(" ")
                    .toLowerCase() +
                " " +
                headerText;

            if (!row.innerText.trim()) {
                row.style.display = "none";
            } else {
                const isMatch = words.every((w) => raw.includes(w));
                row.style.display = isMatch ? "" : "none";
                if (isMatch) {
                    itemHasMatch = true;
                    matchCount++;
                }
            }
        });

        if (itemHasMatch) {
            item.style.display = "";
            bs.show();
            btn.classList.remove("collapsed");
            btn.setAttribute("aria-expanded", "true");
        } else {
            bs.hide();
            btn.classList.add("collapsed");
            btn.setAttribute("aria-expanded", "false");
            item.style.display = "none";
        }
    });

    if (!term) {
        resultEl.innerHTML = "";
        resultEl.classList.remove("no-resultado", "resultado-encontrado");
    } else if (matchCount === 0) {
        resultEl.innerHTML = `<span class="badge bg-danger">Sin resultados. Consultar existencia por WhatsApp</span>`;
        resultEl.classList.add("no-resultado");
        resultEl.classList.remove("resultado-encontrado");
    } else {
        resultEl.innerHTML = `<span class="badge bg-success">${matchCount} resultado${matchCount !== 1 ? "s" : ""} encontrado${matchCount !== 1 ? "s" : ""}</span>`;
        resultEl.classList.add("resultado-encontrado");
        resultEl.classList.remove("no-resultado");
    }
};

function debounce(fn, wait) {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), wait);
    };
}

document.getElementById("searchGeneral").addEventListener("input", debounce(filtrarGeneral, 300));

// Borrar busqueda
document.getElementById("clearSearch").addEventListener("click", function () {
    const searchInput = document.getElementById("searchGeneral");
    searchInput.value = "";
    searchInput.dispatchEvent(new Event("input"));
});

// Busqueda con Logos
function buscarMarca(nombreMarca) {
    const searchInput = document.getElementById("searchGeneral");
    searchInput.value = nombreMarca;
    searchInput.dispatchEvent(new Event("input"));
}

// Cerrar acordeones dentro del modal FAQ
document.getElementById("faqModal").addEventListener("hidden.bs.modal", () => {
    const accordions = document.querySelectorAll("#faqModal .accordion-collapse.show");
    accordions.forEach((ac) => {
        new bootstrap.Collapse(ac, { toggle: false }).hide();
    });
});
